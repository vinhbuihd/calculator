{"version":3,"sources":["App.js","index.js"],"names":["App","useState","input","setInput","prevState","setPrevState","operator","setOperator","curState","setCurState","total","setTotal","inputNum","e","persist","includes","target","innerText","pre","useEffect","operatorType","equals","cal","Math","round","parseFloat","className","onClick","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1efdde89.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n\nfunction App() {\n    const [input, setInput] = useState('0');\n    const [prevState, setPrevState] = useState(\"\");\n    const [operator, setOperator] = useState(null);\n    const [curState, setCurState] = useState(\"\");\n    const [total, setTotal] = useState(false);\n    \n\n    // nhập số: - nếu chưa có gì (!curState) -> e.target.innerText -> ok\n            //  - nếu có curState -> pre + e.target.innerText      -> ok\n            //  - nếu nhập sau dấu . mà nhập tiếp dấu . -> fail    -> ok\n            //  - nếu nhập số sau phép toán tử \n            // -> tính phép tính đó(prevState + curState) -> lưu vào prevState \n\n    // nhập toán tử: - chưa có gì(!curState) -> fail\n                    // chưa có prevState - nếu nhập sau số -> lưu số vào prevState \n                    // có phép toán trước đó(đã có prevState) -> lưu kết quả vào prevState\n\n    const inputNum = e => {\n        e.persist()\n        if (curState.includes('.') && e.target.innerText === '.') return;\n        if (total) {\n            setPrevState('')\n        }\n        curState \n            ? setCurState(pre => (pre === '0' && e.target.innerText !== '.') ? e.target.innerText : pre + e.target.innerText)\n            : setCurState(e.target.innerText === '.' ? '0' + e.target.innerText : e.target.innerText)\n        setTotal(false);\n    }\n\n    useEffect(() => {\n        setInput(curState)\n    }, [curState])\n\n    useEffect(() => {\n        setInput('0')\n    }, [])\n                    \n    const operatorType = (e) => {\n        \n        if (curState === '' && prevState === '') return;\n        setOperator(e.target.innerText);\n        if (prevState !== '') {\n            equals()\n        } else {\n            setPrevState(curState);\n            setCurState('')\n        }\n        setTotal(false)\n    }\n\n    const equals = () => {\n        if (curState === '' || prevState === '') return; \n        setTotal(true);\n        let cal;\n        switch (operator) {\n            case '+':\n                cal = Math.round((parseFloat(prevState) + parseFloat(curState)) * 1000000) / 1000000\n                break;\n            case '-':\n                cal = parseFloat(prevState) - parseFloat(curState)\n                break;\n            case '×':\n                cal = parseFloat(prevState) * parseFloat(curState)\n                break;\n            case '÷':\n                cal = parseFloat(prevState) / parseFloat(curState)\n                \n                break;\n            default:\n                break;\n        }\n\n        setPrevState(cal);\n        setCurState('');\n    }\n    \n    const clear = () => {\n        setCurState('0');\n        setPrevState('')\n    }\n    \n    const minusPlus = () => {\n        if (curState === '' && prevState === '') return;\n        if (curState === '' && prevState !== '') {\n            setPrevState(parseFloat(prevState) * (-1))\n        }\n        if (curState !== '') {\n            setCurState((parseFloat(curState) * -1).toString());\n        }\n        \n    }\n    \n    const percent = () => {\n        if (curState === '' && prevState === '') return;\n        if (curState === '' && prevState !== '') {\n            setPrevState(parseFloat(prevState) / 100)\n        }\n        if (curState) {\n            setCurState((parseFloat(curState) / 100).toString());\n        }\n    }\n\n    \n\n    return (\n        <div className='container'>\n            <div className='wrapper'>\n                <div className='screen'>\n                    {(input ) ? input : prevState}\n                </div>\n                <div onClick={clear} className='btn gray'>AC</div>\n                <div onClick={minusPlus} className='btn gray'>+/-</div>\n                <div onClick={percent} className='btn gray'>%</div>\n                <button onClick={operatorType} className='btn operator'>÷</button>\n                <div onClick={inputNum} className='btn number'>7</div>\n                <div onClick={inputNum} className='btn number'>8</div>\n                <div onClick={inputNum} className='btn number'>9</div>\n                <button onClick={operatorType} className='btn operator'>×</button>\n                <div onClick={inputNum} className='btn number'>4</div>\n                <div onClick={inputNum} className='btn number'>5</div>\n                <div onClick={inputNum} className='btn number'>6</div>\n                <button onClick={operatorType} className='btn operator'>-</button>\n                <div onClick={inputNum} className='btn number'>1</div>\n                <div onClick={inputNum} className='btn number'>2</div>\n                <div onClick={inputNum} className='btn number'>3</div>\n                <button onClick={operatorType} className='btn operator'>+</button>\n                <div onClick={inputNum} className='btn number zero'>0</div>\n                <div onClick={inputNum} className='btn number'>.</div>\n                <div onClick={equals} className='btn orange'>=</div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n)\n"],"sourceRoot":""}